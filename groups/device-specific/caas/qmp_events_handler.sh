#!/bin/sh

# This script monitors qmp events and applies changes to the host.
# E.g. If CIV time/date is changed, the host time/date will be changed to the same value.

# QMP RTC_EVENT JSON Sample:
# {"timestamp": {"seconds": 1585714481, "microseconds": 85991}, "event": "RTC_CHANGE", "data": {"offset": -1}}

# Do NOT edit this file while qemu is running,
# Otherwise the subsequent events cannot be recorded to this file anymore.
event_file=qmp_event.log
# Last RTC event successfully applied to the host.
committed_rtc=""
i=0

while true
do
	sleep 1

	# Exit if qemu fails to be launched in 5s
	if [ ! -f "$event_file" ]; then
		if [ $i -gt 5 ]; then
			echo "Exit due to init failure"
			exit 0
		fi
		echo "$event_file does NOT exist, wait..."
		i=$((i+1))
		continue
	fi

	# Exit for the case shutdown/reboot/CTRL C
	# Ctrl C:
	# {"timestamp": {"seconds": 1585712408, "microseconds": 376665}, "event": "SHUTDOWN", "data": {"guest": false, "reason": "host-signal"}}
	# Reboot:
	# {"timestamp": {"seconds": 1585712553, "microseconds": 277695}, "event": "RESET", "data": {"guest": true, "reason": "guest-reset"}}
	# Shutdown:
	# {"timestamp": {"seconds": 1585712606, "microseconds": 517287}, "event": "SHUTDOWN", "data": {"guest": true, "reason": "guest-shutdown"}}
	shutdown=`cat $event_file | grep "\"event\": \"SHUTDOWN\""`
	reboot=`cat $event_file | grep "\"event\": \"RESET\""`

	if [ "$shutdown" != "" ]; then
		echo "Exit due to guest shutdown"
		exit 0
	fi

	if [ "$reboot" != "" ]; then
		echo "Exit due to guest reset"
		exit 0
	fi

	# Qemu process exits but no qmp event, e.g. kill -9
	if [ "`pgrep qemu-system`" = "" ]; then
		echo "Exit due to exceptions"
		exit 0
	fi

	# Get the last RTC_CHANGE event whose offset is NOT 0
	latest_rtc=`cat $event_file | grep "RTC_CHANGE" | grep -v "{\"offset\": 0}" | awk 'END {print}'`

	# Ignore the RTC_CHANGE event already applied to the host last time
	if [ "$latest_rtc" = "$committed_rtc" ]; then
		continue
	fi

	echo "Guest time is changed"

	seconds=`echo $latest_rtc | jq -r .timestamp.seconds`
	offset=`echo $latest_rtc | jq -r .data.offset`
	old_time=`date -d @$(date +%s)`
	now=$(($seconds+$offset))
	date  +%s -s @$now

	if [ `echo $?` = "0" ]; then
		hwclock --systohc
		updated_time=`date -d @$now`
		echo "Host time is set from \"$old_time\" to \"$updated_time\""
		committed_rtc=$latest_rtc
	else
		echo "Fail to set host time"
		continue
	fi
done

