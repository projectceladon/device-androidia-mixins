on early-init

    # Create symbol link for binder device
    chmod 0666 /binderfs/binder${ro.boot.container.id}
    symlink /binderfs/binder${ro.boot.container.id} /dev/binder

    chmod 0666 /binderfs/vndbinder${ro.boot.container.id}
    symlink /binderfs/vndbinder${ro.boot.container.id} /dev/vndbinder

    chmod 0666 /binderfs/hwbinder${ro.boot.container.id}
    symlink /binderfs/hwbinder${ro.boot.container.id} /dev/hwbinder

    # Mount debugfs and make it writable so that debuggerd can
    # create stack traces, required with newer kernels
    mount debugfs debugfs /sys/kernel/debug
    chmod 0755 /sys/kernel/debug

    # Mount cgroup mount point for cpu accounting
    mount cgroup none /acct nodev noexec nosuid cpu,cpuacct
    mkdir /acct/uid

on early-boot
    # Needed by surfaceflinger to enable it to open trace_marker
    # on start without file permissions error.
    chmod 0222 /sys/kernel/debug/tracing/trace_marker
    # tracefs is mounted after 1st access to it
    chmod 0755 /sys/kernel/debug/tracing


setprop container.memnodes 0
setprop container.cpus 0-3

on init && property:ro.boot.container.memnodes=*
    setprop container.memnodes ${ro.boot.container.memnodes}
on init && property:ro.boot.container.cpus=*
    setprop container.cpus ${ro.boot.container.cpus}

on init
    write /dev/cpuset/foreground/cpuset.cpus ${container.cpus}
    write /dev/cpuset/foreground/cpuset.mems ${container.memnodes}

    write /dev/cpuset/background/cpuset.cpus ${container.cpus}
    write /dev/cpuset/background/cpuset.mems ${container.memnodes}

    write /dev/cpuset/system-background/cpuset.cpus ${container.cpus}
    write /dev/cpuset/system-background/cpuset.mems ${container.memnodes}

    write /dev/cpuset/restricted/cpuset.cpus ${container.cpus}
    write /dev/cpuset/restricted/cpuset.mems ${container.memnodes}

    write /dev/cpuset/top-app/cpuset.cpus ${container.cpus}
    write /dev/cpuset/top-app/cpuset.mems ${container.memnodes}

on fs
    mount_all /fstab.${ro.hardware}
